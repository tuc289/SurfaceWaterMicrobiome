#Sequence data analysis (Mothur v 1.40)
# Analysis of bacterial communities.

## Make ‘.files’ with list of samples and associated fastq sequences. 
mothur > make.file(inputdir="" , type=fastq, prefix=16s)

## Combine the paired-end reads.
## Extract sequence and quality scores from fastq files and assemble contigs.
mothur > make.contigs(file=16s.files)

## Generate descriptive statistics.
mothur > summary.seqs(fasta=16s.trim.contigs.fasta) 

## Remove any contigs with ambiguous bases (“N”), contigs shorter than 292 and longer than 294. These arbitrary parameters were defined based on summary.seqs report.
mothur > screen.seqs(fasta=16s.trim.contgis.fasta, group=16s.contigs.groups, summary=16s.trim.contigs.summary, minlength=292, maxlength=294, maxambig=0)

## Collapse identical sequences. Store representative contigs in .fasta.
mothur > unique.seqs(fasta=16s.trim.contigs.good.fasta) 

## Create a count table of current unique sequences.
mothur > count.seqs(name=16s.trim.contigs.good.names, group=16s.contigs.good.groups)

## Customize SILVA database to targeted the 16S rRNA region.
mothur > pcr.seqs(fasta=silva.nr_v132.align, start=11894, end=25319, keepdots=F)
## Rename reference files.
mothur > rename.file(input = silva.nr_v132.pcr.align, new= silva.v4.align)

## Align contigs to SILVA database.
mothur > align.seqs(fasta=16s.trim.contigs.good.unique.fasta, reference=silva.v4.align, flip=T)

## Screen sequences that are before or after the sites of alignment from the previous step. Define the predominant start and stop sites based on summary.seqs. Set. max homopolymer to 8.
mothur > screen.seqs(fasta=16s.trim.contgis.good.unique.align, count=16s.trim.contigs.good.count_table,   minlength=292, maxlength=294, maxhomop=8)

## Eliminate overhangs and filter out “-“ characters using Vertical=T and “.” Characters using trump=. 
mothur > filter.seqs(fasta=16s.trim.contigs.good.unique.good.align, vertical=T, trump=.)

## Rerun unique.seqs.
mothur > unique.seqs(fasta=16s.trim.contigs.good.unique.good.filter.fasta, count = 16s.trim.contigs.good.count_table)

## De-noise sequences. Collapse similar sequences that are within the allowed mismatch threshold (diffs=2).
mothur > pre.cluster(fasta=16s.trim.contigs.good.unique.good.filter.unique.fasta, count=16s.trim.contigs.good.unique.good.filter.count_table, diffs=2) 

## Detect and remove chimera using UCHIME.
chimera.uchime(fasta=16s.trim.contigs.good.unique.good.filter.unique.precluster.fasta, count=16s.trim.contigs.good.unique.good.filter.unique.precluster.count_table, dereplicate=t)
remove.seqs(fasta=16s.trim.contigs.good.unique.good.filter.unique.precluster.fasta, accnos=16s.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.accnos)

## Assign taxonomy to individual contigs.
mothur > classify.seqs(fasta=16s.trim.contigs.good.unique.good.filter.unique.precluster.pick.fasta, count=16s.trim.contigs.good.unique.good.filter.unique.precluster.denovo.uchime.pick.count_table, reference=silva.nr_v132.align, taxonomy=silva.nr_v132.tax)

## Remove potential chloroplast and mitochondrial sequences based on taxonomical assignment.
mothur > remove.lineage(fasta=16s.trim.contigs.good.unique.good.filter.unique.precluster.pick.fasta, count=16s.trim.contigs.good.unique.good.filter.unique.precluster.denovo.uchime.pick.count_table, taxonomy=16s.trim.contigs.good.unique.good.filter.unique.precluster.pick.nr_v132.wang.taxonomy, taxon=Chloroplast-Mitochondria-unknown-Eukaryota)

## Calculate uncorrected pairwise distances between aligned DNA sequences. Save distances lower than 0.03.
mothur > dist.seqs(fasta=16s.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.fasta, cutoff=0.03)

## Assign contigs to OTUs.
mothur > cluster(column=16s.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.dist, count =16s.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.pick.pick.count_table)

## Quantify OTUs using the 0.97 similarity cutoff. 
mothur > make.shared(list=16s.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.opti_mcc.list,count=16s.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.pick.pick.count_table, label=0.03)

## Assign taxonomy to OTUs and generate a taxonomy file.
mothur > classify.otu(list=16s.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.opti_mcc.list,count=16s.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.pick.pick.count_table,taxonomy=16s.trim.contigs.good.unique.good.filter.unique.precluster.pick.pds.wang.pick.taxonomy, label=0.03)

